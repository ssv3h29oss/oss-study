GitとSubversionの違い

＜特徴＞
Subversion
・集中型バージョン管理システム。
・存在する1つのリポジトリを全員で共有する。
・commitは共有リポジトリへの反映を意味
・Subversionは1つのリポジトリに対してCheckoutやcommitを行うので操作がシンプル。

Git
・分散型バージョン管理システム。
・共有リポジトリの他に、ローカルPC上にローカルリポジトリを作成する。
・commitはローカルリポジトリに対して行い、そのcommit内容を共有リポジトリに反映させる(push)仕組み
・ローカルリポジトリがあるため、やや複雑。

＜メリット・デメリット＞
SubversionからGitへ移行する場合。
「git svn」を利用すると、移行しやすい。
　git svnはGitからSubversionを使うためのコマンド。
　SubversionをGitに近い感覚で扱え、Gitに移行する際に役立つ。

参考
・Subversion 対 Git：https://tracpath.com/works/development/subversion_vs_git/
・Gitの良さが分からない？ ちょっとそこに座れ：https://www.kaitoy.xyz/2016/10/06/git-vs-subversion/


SubversionがGitより優れているところ
1.集中型でリポジトリがひとつであるため、仕組みがシンプル。
　1つの共有リポジトリを全員で共有し、操作はこのリポジトリに対するもの(Checkoutやcommit)のみであり、シンプルでわかりやすい。
　それに対してGitは、リモートとローカルリポジトリの両方を意識しなければならず、Subversionよりも操作が複雑。
　そのため、学習コストはGitよりSubversionのほうが少なといえる。

2.リビジョン番号(ID)がわかりやすい。
　リビジョン番号とは、commitを識別するためのIDである。
　Subversionでは、1つのリポジトリに対してcommitが行われるため、連番となる。
　Gitでは、複数のローカルリポジトリに対してcommitが行われ、さらに共有リポジトリにpushされる。
　このため、連番ではなく、ハッシュ値が使われている。
　連番とハッシュ値では、連番のほうがわかり易いだろう。

SubversionがGitより優れているところ
1.ローカルにコミットできる
　Subversionでは、共有のリポジトリへ直接コミットするため、未完成なコードをコミットすると、ほかの開発者に影響が出てしまう。
　つまり、完成したコード(ほかに影響を与えないコード)しかコミットできないことになる。(コミットしないほうがいいと言うべきかもしれないが)
　完成したコードのみをコミットするということは、そこに至るまでの試行錯誤は履歴として残らないということである。
　Gitではローカルにコミットできるため、実験的なコードや未完成なコードをコミットしても、ほかの開発者に影響が出ない。
　これは、試行錯誤の履歴を残しておけるということである。
　試行錯誤した履歴が残っていれば、「やっぱり、あの時に考えたコードのほうがいいな」と思った時に、ログを遡ってコードを探すことができるなどの利点がある。
　また、実際の実装とデバッグ用の追加部分(ログ出力など)を別々にコミットしておけば、デバッグのコードの削除漏れがあった！とか、削除してはいけない部分まで消しちゃった！というミスもなくなる。

2.全体的に動きが速い
　Subversionは、基本的にサーバーとやり取りをする。サーバーとつながらない場合、コミットもログの参照もできない。
　Gitはリモートリポジトリと同じものをローカルリポジトリに持っているため、コミットやログの参照など基本的な動作はローカルで完結する。
　サーバーとのやり取りが発生しない分、Gitのほうが動作が速い。(プッシュやプルは除く)
　ただし、1番最初に行うclone(リモートリポジトリをローカルリポジトリにコピーする作業)には時間がかかる。

3.ブランチやマージが容易
　Gitのブランチは単一のコミットを指す参照で、リポジトリ内ではハッシュ値が書かれただけのたった一つのファイルに過ぎない。
　その為ブランチは一瞬で作成できるし、ディスクも圧迫しない。
　さらに、ローカルリポジトリに過去の全ファイルの全バージョンが入っているという分散リポジトリの特長のおかげで、ブランチの切り替えも軽快にできる。
　一方SVNはそもそもブランチをサポートする直接的な機能がないため、ブランチはリビジョンのコピーという形で実装されている。 
　コピーと言ってもハードリンクみたいなものでディスク上に物理的なコピーが作られるわけではなく、軽量という点ではGitと大差ないが、集中リポジトリなせいでブランチの切り替えには差が出る。
　また、SVNは子ブランチと親ブランチ間のマージは自動で出来るが、それ以外（孫 <--> 子）についてはできないなど、制約も多い。
　Gitでは親子間以外の自動マージも可能。制約も、コストもSVNに比べて少ない。

4.GitHubなどが使える
　GitHubは、リモートリポジトリを提供するWebサービス。
　料金については、容量に応じて利用料が決まる仕組みになっている。
　プライベート（非公開）リポジトリを利用したい場合は、有料プランに登録する必要がある。
　GitHubには、「PullRequest」など、便利な機能があるため、広く使われている。
　プルリクエストとは簡単に言うと、開発者のローカルリポジトリでの変更を他の開発者に通知する機能。
　プルリクエストは次のような機能を提供する。
　・機能追加や改修など、作業内容をレビュー・マージ担当者やその他関係者に通知
　・ソースコードの変更箇所をわかりやすく表示
　・ソースコードに関するコミュニケーションの場を提供
　つまり、レビューにかかる手間が少なくなり、レビュー後の指摘事項などのコメントも保管されるため、後で確認する必要が発生した場合でも楽。
　ただし、GitHubだと開発した成果物が社外に保存されるということで業務利用が敬遠されることもあると思われる。
　そんなときには、GitLabなどを利用すると良いだろう。
　GitLab：GitHubのようなサービスを社内などのクローズドな環境に独自で構築できるように公開されたオープンソース。










