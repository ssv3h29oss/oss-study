■静的解析とは
コードを実行せずに行なう検証のことで、ソース中にバグを発生させるようなコードや、
非効率な書き方がないかなどを調べて、コードを強化するためのもの。
ソースコードを解析して特定のコーディングパターン(コーディングルール)に違反している
箇所を指摘する、コーディングスタンダード解析や
プログラムの各点で変数群の取りうる値についての情報を集めるデータフロー解析、
プログラムの実行パスを解析する制御フロー解析などがある。
よく使われるツールとしては、Checkstyle(コーディング規約チェック中心)やFindBugs(バグチェック中心)などがある。

■なぜ静的解析を実施するか
多くのシステムは、複数の開発者によって開発され、完成後もバグの改修、仕様変更、
機能拡張などのために変更され続ける。
このため、最初にコードを書いた人とは別の人がコードを読む際に理解しやすく、保守が容易になるように、
統一された命名規約や書式(コーディングルール)に従ってコードを記述することが多い。
だが、うっかりルールに違反したコーディングをしてしまうこともあるだろう。
また、変数の未初期化や到達不可能なコードなど、バグに直結しかねないミスをすることもあるだろう。
これらを防ぐために、静的解析が必要になる。
ツールを使えばコスト削減になり、レビューではロジックに関するところのみ確認すればよくなる。

■Jenkinsなどで自動化しない場合
個人で実施することになる。
この場合、必ず実施する人としない人がいたり、Checkstyleなどの警告をこまめに直す人がいれば
そうでない人がいたりと、品質にばらつきが生まれたり、管理者側も運用を浸透させたり
管理することに労力を割かれる。なにより、開発者が個人の端末でなにをしているかなど
把握できないので、ブラックボックス化する可能性が高い。
管理者が、コミットされたコードをチェックアウトしていちいちチェックするというのも
ひとつの手だか、管理者の負担が増えるのでお勧めはしない。
担当者個人に任せていて、気づいた時には手遅れで余分な工数がかかる･･･なんてことがおきるかも？

■Jenkinsで自動化した場合
Jenkinsで以下のように動くように設定した場合。
コミット→ビルド・静的解析→レポート作成→通知

メリット
・コミットすれば自動で実施されるので、うっかり実行し忘れることは防げる。
・通知を受け取れるので、すぐにレポートを確認して担当者に修正を促すことができる。
・グラフなどになっているため、よくないコードがどれだけ含まれているのか、どんな内容なのか傾向を探りやすい。
・結果が時系列にグラフになることで変化に気付くことができる。
このレポートをミーティングなどでメンバーに見せ、問題の確認、共有、日々の改善につなげるといった使い方ができる。
「最近警告が減ってきているのでイイネ」とか「昨日極端に増えたけどどんな変更した？」とか

デメリット
・解析ツールの結果は常に絶対ではないため、判断が必要になる場合もある

Jenkinsで自動化することで、自動化しない場合と比べて、以下の利点かある
・必ずチェックが実施され、人によるばらつきが無くなる。
・通知され、レポートが残るので、管理者が修正を指示しやすく、修正忘れを無くせる。
⇒品質が維持・向上し、統一される。
・静的解析で確認ができているため、レビュー時に確認しなくて良い。
⇒レビュー時のコスト削減


■Jenkinsで実行できる静的解析
Jenkinsではプラグインで静的解析を実行できるようにするので、いくつかプラグインを紹介する。
・FindBugs Plugin - コンパイル後のバイトコードを解析してバグや不具合が発生しそうなコードをチェックしてくれる
・Checkstyle Plugin - コーディング規約違反をチェックをしてくれる
・PMD Plugin - バグや不具合が発生しそうなコードをチェックしてくれる
・DRY Plugin - コピペコードのような重複したコードをチェックしてくれる
・Task Scanner Plugin - タスクスキャナーという名前ですがソースコードを任意の文字列で検索するチェックをかけることができます
　　　　　　　　　　　　TODO、System.out.printlnなどをスキャンすることで、テストコードの削除し忘れなどを確認できる。


参考
Jenkinsを使って継続的に静的コード解析をさせる：http://d.hatena.ne.jp/suzukij/20120611/1339368249
Jenkinsでレポート出力　Cobertura & Findbugs & CheckStyle：https://cloudear.jp/blog/?p=1171
Jenkinsで静的解析・テスト結果やらのレポートを生成するMavenの設定：http://qiita.com/digdagdag/items/39e31f3e3093e511fbce
Jenkinsで静的コード解析を常時自動化する：http://forza.cocolog-nifty.com/blog/2012/06/jenkins-e76c.html
Jenkinsでカバレッジレポートや静的解析レポートを出力してみよう！Part1：http://labs.opentone.co.jp/?p=735
静的解析(コーディングスタンダード解析)とは：https://www.techmatrix.co.jp/t/quality/static-analysis.html

