git
＜gitとは＞
・プログラムのソースコードなどの変更履歴を記録・追跡するための分散型バージョン管理システム
・巨大プロジェクトにも対応できるように、動作速度に重点が置かれている

「分散型」
各ユーザのワーキングディレクトリ(作業ディレクトリ)に全履歴を含んだリポジトリの完全な
複製を作るため、ネットワークにアクセスできないなどの理由で中心リポジトリにアクセス
できない環境でも履歴の調査や変更の記録といったほとんどの作業を行うことができる。

＜言葉の説明＞
・リモートリポジトリ(共有リポジトリ、中心リポジトリ)
　→複数人でリポジトリを共有して開発を行うときに、開発者全員が参照し、開発の元になるリポジトリ。
　　実際の開発では、サーバー側に作ることになると思われる。
・ローカルリポジトリ(作業ディレクトリ、ワーキングディレクトリ)
　→ローカル環境のリポジトリのこと。
　　実際に開発作業を行う場所。Gitが管理する3本の"木"からなる。
　　①WorkingTree(WorkingDirectory)：ファイルそのものがあるディレクトリ。
　　②Index：中間的な位置にあるコミット予約された（ステージされた）ファイル置き場。ここに記録した内容をリポジトリにコミットする。
　　　　　　　インデックスへの登録は「コミット予約」もしくは「仮コミット」みたいなもの。
　　　　　　　インデックスに登録することを、「ステージする」「ステージング」「コミット予定」「管理対象」などと言う。
　　③Repository：履歴（コミット）を管理している場所。
・master
　→ローカルリポジトリを指し示す名前。(デフォルト名)
　　Gitはコミットが行われるとmasterブランチと呼ばれる作業ディレクトリを作る。
　　masterブランチは直近のコミットを指し示す意味を持ち、コミットを繰り返す度にmasterブランチの指し示す場所は進んでいく。
・HEAD
　→現在のコミット
・origin
　→リモートリポジトリを指し示す名前。
・ブランチ
　→履歴の流れを分岐して記録していくためのもの。
　　通常は最初のコミットでgitが自動的に作成するマスタブランチ(master branch)を利用する。
　　ブランチを切り替えて利用するタイミングは、マスタブランチと関連のない機能を実装するときに利用されるのが一般的。

＜作業の流れ～ローカル～＞
1.リポジトリ初期化
　新規作成する場合
　・git init
　リモートリポジトリをコピーする場合
　・git clone <コピー元リポジトリのURL>
　実際の開発では、クローンを実施することが多いと思われる。

2.ファイル編集～コミット
　ローカルリポジトリ
　Gitでの作業手順
　　ファイル編集→インデックスへ登録(git add)→リポジトリへ反映(git commit)
　※この時点ではローカルリポジトリのHEADへの反映であって、リモートリポジトリへは反映されていないことに注意！
　・git add <ファイル名>：インデックスへ登録
　・git commit -m "コミットメッセージ"：インデックスの内容をコミット(コメントも登録)
　Subversionではaddは始めの1回のみだが、Gitでは毎回行う。
　「git add」で明示的にファイルを指定しないとコミット対象にならないので、うっかり余計なファイルまでコミットしてしまうミスが減る。
　「git add -p」を使うと、同じファイル内でも特定の箇所だけをコミット対象としてインデックスに登録できる。
　変更の確認がしたい場合は、以下の方法で確認する。
　・git diff：WorkingTreeとIndexの比較
　・git diff --cached：IndexとRepository(HEAD)の比較
　・git diff HEAD：WorkingTreeとRepository(HEAD)の比較
　例)
　・ a、b、c、dの4つのファイルを修正したとして、a、bの2つのファイルしかコミットしたくない場合
　　git diff  # 修正内容を確認（a、b、c、dすべての差分が表示される）
　　git add a b  # インデックスに登録
　　git diff --cached  # 修正内容を確認 (インデックスに登録したa, bの差分が表示される(HEADと比較))
　　git commit  # 修正内容をコミット
　　例の中には書いていないが、-mオプションを使ってコメント(修正内容)を登録すること。
　　何をしたかわかるようにしておかないと、後で困る。
　ついでに取り消し方
　・git checkout -- <ファイル名>：HEADの最後のコミット状態にファイルの内容が戻る(インデックスはそのまま)
　　　■git checkout HEAD -- <file> とした場合は、リポジトリの内容を Working TreeとIndexに反映させる
　・git reset HEAD ファイル名：インデックスの内容を取り消す(ファイルの内容は戻らない)
　　　■--soft の場合はリポジトリのHEADのみに書き戻す(リポジトリのみ戻る)
　　　■--soft も --hard も指定しない場合はリポジトリのHEADとIndex に書き戻す(リポジトリとインデックスが戻る)
　　　■--hard の場合はリポジトリのHEADとIndexとWorking Treeに書き戻す（すべて無かったことになる）

3.作業状態確認
　①ログ
　　・git log：Subversionとほとんど変わりなし
　②現在の状態
　　・git status：状態ごとにファイルが出力される。
　　　　　　　　　また、先に進める (add / commit) か元に戻す (reset / checkout) 方法も出力される
　　　<出力内容>
　　　・Changes to be committed … git addされてコミット待ちのファイル
　　　・Changed but not updated … ローカルで修正されているがaddされていないファイル
　　　・Untracked files … まだ管理対象に含まれていない（一度もコミットされていない）ファイル

4.リモートリポジトリへ反映(プッシュ)
　ローカルの変更内容がローカルリポジトリのHEADに格納されているので、それをリモートリポジトリに反映させる。
　Gitでは、頻繁にローカルコミットを実行し、プッシュは準備が整った場合のみ実行する。
　・git push origin master：
　　　　マスタブランチにコミットされた HEAD の内容をリモートリポジトリに送信する
　　　　master以外のブランチをリモートリポジトリに適用する場合はmaster部分に適用ブランチ名を入れる。
　もし、既存リポジトリをクローンせずに使用した場合、以下でリモートリポジトリを登録できる。
　・git remote add origin <server>

5.リモートリポジトリから最新を取得(プル)
　他のメンバーが追加した機能や修正したファイルを自分の作業ディレクトリに取り込む
　・git pull：リモートリポジトリの最新情報を取得し(fetch)自分のローカルリポジトリと統合(merge)する

6.マージ
　・git marge <branch>：現在のブランチ(master)に別のブランチをマージする
　Gitはmargeでもpullでも自動的にマージしようとするが必ず成功するわけではない。
　結果的に競合(conflict)が発生した場合、手動でファイルを編集する必要がある。

＜ブランチ＞
1.新規ブランチ作成
　・git branch <ブランチ名>
　※現在のブランチを知りたい場合は「git branch」→現在存在するブランチの一覧と、どのブランチを使用中か確認できる
2.ブランチを切り替える
　・git checkout <ブランチ名>：指定したブランチに切り替える。ディレクトリを移動したようなもの。


＜作業の流れ～リモート～＞
ssh経由でリポジトリの取得を行うGitサーバーを構築
1.(サーバー)リポジトリ用フォルダ作成
　①リポジトリを格納するフォルダを作成する。
　②①の中に「リポジトリ名.git」という名前でリポジトリにするフォルダを作成する。
2.(サーバー)リモートリポジトリ作成
　作成したフォルダに移動して、リポジトリの初期化
　・git --bare init --share：ベアリポジトリ作成
　　　--bare：管理ファイルのみ生成。このオプションつきで生成したリポジトリをベアリポジトリという。
　　　　　　　リモートリポジトリはベアリポジトリでなければいけない。
　　　--shared：リモートリポジトリ用のパーミッション自動付加
3.ローカルとの同期
　①空のローカルリポジトリを作成。
　・git init
　・git add.
　・git commit
　②リモートリポジトリの設定
　・git remote add origin ssh://ユーザ名@サーバ名/リポジトリの場所
　③プッシュ
　・git push origin master




＜ダウンロード＞
git(windows用):https://git-for-windows.github.io/


＜参照＞
Wikipedia https://ja.wikipedia.org/wiki/Git
Gitの基礎練習 http://www.hyuki.com/techinfo/gitinit.html
Subversion ユーザーが Git を使ってみた (基本操作編) http://www.machu.jp/diary/20100506.html#p01
Git の基礎勉強 ?Git によるバージョン管理を使う http://tracpath.com/bootcamp/learning_git_firststep.html
サルでもわかるGit入門 http://www.backlog.jp/git-guide/
いつやるの？Git入門 http://www.slideshare.net/matsukaz/git-17499005?next_slideshow=1
こわくないGit http://www.slideshare.net/kotas/git-15276118
gitのリモートリポジトリ作成とgit専用ユーザの作成方法 http://www.oteage.com/entry/2015/05/13/141044
Gitのリポジトリを新規に作成する手順 http://napzak.jp/tips/?Git%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E6%96%B0%E8%A6%8F%E3%81%AB%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86
Gitリモートリポジトリ構築 http://capm-network.com/?tag=Git%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E6%A7%8B%E7%AF%89
Windows Server上にGitリモートリポジトリを導入する手順書 http://qiita.com/nipoko/items/6e81a6021358ff8c03e9
