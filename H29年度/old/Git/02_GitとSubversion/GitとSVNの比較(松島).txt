# Gitに移行すると改善されること

## ローカルにリポジトリがあるため、個人の作業をバージョン管理できる
例えば一通り実装が完了して、デバッグ用にprintfを加えていきたい場面を想定
* SVNの場合
実装完了→printfを加えてデバッグ→printfの行だけ削除→コミット
という流れになる。
これだと消し忘れがあるかもしれないし、余計な行を消してしまうかもしれない。
（printfを加える前のファイルをバックアップしておくという手もあるが、それは手動でバージョン管理しているということ。

* Gitの場合
実装が完了した時点で一度コミットする。（ローカルなのでいくらコミットしても周りに影響を与えない。）
→printfを加えてデバッグ
→デバッグが終わったら、コミットした時点に戻れば良い。
他にも、複数の実装パターンを検討したいときにも便利。
まず１つのパターンをコミットしておけば、別のパターンを気軽に試すことができる。
この場合は気に入った方のコミットを残せば良い。




## コミット履歴が綺麗になる
* SVNの場合
コードレビューしてもらうためには、一度共有リポジトリにコミットする必要がある。
何か指摘があった場合、修正してから再度コミットするという流れになるため、余計なコミット履歴が残ってしまう。
コミット履歴を消すことも困難。

* Gitの場合
ローカル作業のコミットは取り消しすることができるため、履歴を綺麗にしてからPushすることができる。
またプルリクエストを使うことでレビュー担当者のチェックを間に入れることができる。
問題がなければ指定ブランチにマージされ、問題があれば拒否して修正してもらえば良いため、余計な履歴が残らない。




## 開発者はそれぞれ異なるブランチでの開発が基本となる
Gitではブランチを切って開発することが推奨されている。
SVNでも似たような機能があるが、リモートリポジトリ上にブランチを作るため開発者が多くなればそれだけブランチも増えてしまう。

* ブランチを切るメリット
  * ローカル作業の場合
  複数の作業を並行して行うとき、片方の作業を中断してもう一方の作業に取りかかることができる。
  中断した作業の状態にいつでも戻ることができる。
  * リモート作業の場合
  master・・・最新のリリース
  develpment・・・最新の開発版
  というように分けておくと、ユーザから不具合報告が来たらmasterブランチを確認すればいいし、
  開発途中の最新を見たいときはdevelopmentを見ればすぐに確認できる。
  また、開発途中で本番に不具合が起きて緊急で対応しないといけない時には、
  masterブランチからhotfixブランチを切って、修正したらmasterブランチにマージする。
  こうすることで、開発途中のものを急いでリリースせずに緊急対応だけをリリース版に組み込むことができる。
  落ち着いたらmasterブランチをdevelopmentブランチにマージして開発を再開すれば良い。

* 各個人がローカルでブランチを切って作業することで、プルリクエストを最大限活用できる
  * 手順
    1. リモートリポジトリをローカルにclone
    2. ローカルで作業用のブランチを切る
    3. 作業が終わったら、作業用ブランチをリモートリポジトリにpush
    4. プルリクエストをしてレビューしてもらう（指摘があったら修正して再度push）
    5. レビューが完了したら、リモートリポジトリ上で派生元ブランチに作業用ブランチをマージする
    6. 作業用ブランチを削除する（リモートリポジトリ、ローカル両方）




### Gitの弱点
* バイナリファイルが苦手？


#### 参考
Gitの良さが分からない？ ちょっとそこに座れ
https://www.kaitoy.xyz/2016/10/06/git-vs-subversion/

Subversionを使用し続けているプロジェクトがGitに移行することを考えてみた
http://qiita.com/sh-ogawa/items/0bac2516d85e3db4dfd8

Git学習方法
http://www.sejuku.net/blog/6043
