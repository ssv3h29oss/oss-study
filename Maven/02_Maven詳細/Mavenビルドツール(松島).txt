ビルドツールとしてのMaven
<ビルドツールを使うことの利点>
◆統一したビルドプロセスの提供
開発現場では、「コンパイル → テスト → パッケージ化 → デプロイ」というルーチンを何回も繰り返し行うことになる。
この作業を全て手作業で行った場合、ビルド対象を間違えてしまったり、
デプロイするファイルやデプロイ先サーバを間違えてしまうというリスクがある。
さらにデプロイミスに気づかないままテストをしてしまうと、そのテストが全て無駄になってしまう。
アプリケーションによってはコンパイルやデプロイに何分もかかるものもあるため、こうしたミスがあるとかなりのタイムロスになってしまう。
→ビルドツールを使って自動化することで、プログラムのコンパイルからデプロイまでの作業を、毎回同じ手順で正確に行うことができ、工数削減に繋がる



<Mavenでできること>
◆プロジェクトの作成からデプロイまでの作業を共通のコマンドで実施
各々の操作はmvnコマンドで行うことができる。

1.プロジェクトの作成
mvn archetype:create
2.コンパイル
mvn compile
3.テスト
mvn test
4.パッケージ化
mvn package
5.デプロイ
mvn deploy

※プロジェクトに関する設定はpom.xmlに記述しておくことで、ソースコードの場所やクラスファイルの出力先、デプロイ先のサーバ等を指定できる。


◆ビルドを構成するタスク間の依存関係を管理し，そのタスクのインプットとなる上流タスクの結果やソースコードなどの変更有無からタスクの実行有無を判断する


◆プロファイル



◆ライブラリの依存関係を管理
アプリケーションを動かすのに必要なライブラリはpom.xmlに記述しておくことで、必要なライブラリは自動的にダウンロードされ、コンパイル時には自動的にクラスパスへ追加してくれる。




<Antと比較した利点>
Antは、プロジェクトのディレクトリ構成の決定や、コンパイルやJARファイル作成のためのタスクの記述など、実際の開発に入る前に色々な作業を行わなければなりません。（設定ファイルの記述が必要）
Mavenの場合は多くがデフォルトが決められているので、プロジェクトの構成などに迷う必要はありませんし、必要な作業は始めからコマンド一つで行うことができます。

